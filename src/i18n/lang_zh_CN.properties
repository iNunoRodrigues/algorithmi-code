#  /*
#  * Copyright (c) 2015 Instituto Politecnico de Tomar. All rights reserved.
#  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#  *
#  * This code is free software; you can redistribute it and/or modify it
#  * under the terms of the GNU General Public License version 2 only, as
#  * published by the Free Software Foundation.
#  *
#  * This code is distributed in the hope that it will be useful, but WITHOUT
#  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#  * version 2 for more details (a copy is included in the LICENSE file that
#  * accompanied this code).
#  *
#  * You should have received a copy of the GNU General Public License version
#  * 2 along with this work; if not, write to the Free Software Foundation,
#  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#  *
#  */
#//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
#//::                                                                         ::
#//::     Antonio Manuel Rodrigues Manso                                      ::
#//::                                                                         ::
#//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
#//::     Escola Superior de Tecnologia de Tomar                              ::
#//::     e-mail: manso@ipt.pt                                                ::
#//::     url   : http://orion.ipt.pt/~manso                                  ::
#//::                                                                         ::
#//::     This software was build with the purpose of investigate and         ::
#//::     learning.                                                           ::
#//::                                                                         ::
#//::                                                               (c)2015   ::
#//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#//////////////////////////////////////////////////////////////////////////////
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# UPDATE lang_keys.java if set new values
# UPDATE KeyWord.java if set new values
#--------------------------------------------------------------------------------
KEYWORD.begin= \u65e9
KEYWORD.end= \u7ed3\u675f
#-----------------------------------
KEYWORD.define = \u786e\u5b9a
KEYWORD.execute = \u6267\u884c
KEYWORD.write = \u5199
KEYWORD.read = \u9605\u8bfb
#-----------------------------------
KEYWORD.if = \u5982\u679c
KEYWORD.then = \u7136\u540e
KEYWORD.else = \u4f46
KEYWORD.while = \u800c
KEYWORD.do = \u54c1\u724c
#-----------------------------------
KEYWORD.for = \u8fed\u4ee3
KEYWORD.from = \u7684
KEYWORD.to = \u81f3
KEYWORD.step = \u6b65
KEYWORD.next = \u4e0b
#-------------------------------
KEYWORD.function = \u529f\u80fd
KEYWORD.return = \u56de\u62a5
KEYWORD.break = \u4f11\u606f
KEYWORD.continue = \u7ee7\u7eed

#-------------------------------
KEYWORD.comments = //
KEYWORD.memory = \u8bb0\u5fc6
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.globalMemoryName = \u5168\u5c40\u5b58\u50a8\u5668
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.mainFunctionName = \u4e3b\u8981\u8282\u76ee
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.defaultFunctionName = \u529f\u80fd
#------------------------------------------------------------------------------
#-------         D E F I N E    S Y M B O L S                     -------------
#-------           M E N  U      D E F I N E                      -------------
#------------------------------------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

TYPE.void = \u7a7a
TYPE.integer = \u6240\u6709
TYPE.real = \u5b9e

TYPE.character = \u4eba\u7269
TYPE.character.limitator = '
TYPE.character.escape = \\

TYPE.string = \u6587\u672c
TYPE.string.limitator = "

TYPE.boolean = \u5408\u4e4e\u903b\u8f91\u7684
TYPE.boolean.true = \u5b9e
TYPE.boolean.false = \u5047

TYPE.defaultVarName = var

TYPE.array.name = matriz


#--------------------------------------------------------------------------------
CONSTANT.true = verdadeiro
CONSTANT.true.name = _V
CONSTANT.true.help = valor l\u00f3gico de verdade

CONSTANT.false = falso
CONSTANT.false.name = _F
CONSTANT.false.help = valor l\u00f3gico de falso

CONSTANT.PI = 3.141592653589793
CONSTANT.PI.name = _PI
CONSTANT.PI.help = valor de PI

CONSTANT.E = 2.718281828459045
CONSTANT.E.name = _E
CONSTANT.E.help = N\u00famero de Euler

#------------------ 
SEPARATOR.comma = ,
#---------------- parentesis 
BRACKET.round.open = (
BRACKET.round.close = )
#---------------- index de arrays
BRACKET.square.open = [
BRACKET.square.close = ]
#---------------- conjunto de valores
BRACKET.brace.open = {
BRACKET.brace.close = }
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
OPERATOR.set = =
OPERATOR.set.help = atribui\u00e7\u00e3o
#-------------------------------------------------------------------------------
OPERATOR.negative = -
OPERATOR.negative.help sinal negativo

#-------------------------------------------------------------------------------
OPERATOR.sum = +
OPERATOR.sum.help = soma

OPERATOR.sub = -
OPERATOR.sub.help = subtra\u00e7\u00e3o

OPERATOR.mult = *
OPERATOR.mult.help = multiplica\u00e7\u00e3o

OPERATOR.div = /
OPERATOR.div.help = divis\u00e3o
 
OPERATOR.mod = %
OPERATOR.mod.help = resto da divis\u00e3o inteira

OPERATOR.power = ^
OPERATOR.power.help = pot\u00eancia

#-------------------------------------------------------------------------------

OPERATOR.equal = ==
OPERATOR.equal.help = igualdade a 

OPERATOR.different = !=
OPERATOR.different.help = diferente de

OPERATOR.greater = >
OPERATOR.greater.help = maior que


OPERATOR.greaterOrEqual = >=
OPERATOR.greaterOrEqual.help = maior ou igual que

OPERATOR.less = <
OPERATOR.less.help = menor que


OPERATOR.lessOrEqual = <=
OPERATOR.lessOrEqual.help = menor ou igual que

#-------------------------------------------------------------------------------

OPERATOR.not = !
OPERATOR.not.help = nega\u00e7\u00e3o (n\u00e3o)


OPERATOR.and = &&
OPERATOR.and.help = conjun\u00e7\u00e3o (e)

OPERATOR.or = ||
OPERATOR.or.help = disjun\u00e7\u00e3o (ou)

#-------------------------------------------------------------------------------
# NOTE : to add new functions update:
# 1 - CoreCalculator -  functions.add(new FUNC());
# 2 - ExpressionPopup -  popul.add(buildItem(new FUNC()))
#-------------------------------------------------------------------------------
FUNCTION.sin = \u6b63\u5f26
FUNCTION.sin.help = calcula o seno de um angulo em radianos
FUNCTION.sin.definition = sin( radianos )


FUNCTION.cos = \u4f59\u5f26
FUNCTION.cos.help = calcula o coseno de um angulo em radianos
FUNCTION.cos.definition = cos( radianos )

FUNCTION.tan = \u5207\u7ebf
FUNCTION.tan.help = calcula a tangente de um angulo em radianos
FUNCTION.tan.definition = tan( radianos )

FUNCTION.asin = \u53cd\u6b63\u5f26
FUNCTION.asin.help = calcula o arco seno de um valor [-1,1]
FUNCTION.asin.definition = asin( numero )

FUNCTION.acos = acos
FUNCTION.acos.help = calcula o arco coseno de um valor [-1,1]
FUNCTION.acos.definition = acos( numero )

FUNCTION.atan = atan
FUNCTION.atan.help = calcula o arco tangente de um valor [-PI/2, PI/2]
FUNCTION.atan.definition = atan( radianos )

FUNCTION.sinh = sinh
FUNCTION.sinh.help = calcula o seno hiperb\u00f3lico 
FUNCTION.sinh.definition = sinh( radianos )

FUNCTION.cosh = cosh
FUNCTION.cosh.help = calcula o coseno hiperb\u00f3lico 
FUNCTION.cosh.definition = cosh( radianos )

FUNCTION.tanh = tanh
FUNCTION.tanh.help = calcula a tangente hiperb\u00f3lica
FUNCTION.tanh.definition = tanh( radianos )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.random = random
FUNCTION.random.help = calcula um valor aleatorio no intervalo [0.0  1.0]
FUNCTION.random.definition = random()

FUNCTION.abs = abs
FUNCTION.abs.help = \u8ba1\u7b97\u53c2\u6570\u7684\u6b63\u503c
FUNCTION.abs.definition = abs( numero )


FUNCTION.sqrt = sqrt
FUNCTION.sqrt.help = calcula a raiz quadrada de um numero
FUNCTION.sqrt.definition = sqrt( numero )

FUNCTION.exp = exp
FUNCTION.exp.help = calcula a exponencial de um numero ( e^x )
FUNCTION.exp.definition = exp( numero )


FUNCTION.int = int
FUNCTION.int.help = converte um numero para inteiro (retira a parte decimal)
FUNCTION.int.definition = int( numero )


FUNCTION.round = round
FUNCTION.round.help = arredonda um numero com casas decimais
FUNCTION.round.definition = round( real, inteiro )


FUNCTION.pow = pow
FUNCTION.pow.help = calcula a pentencia entre dois numeros
FUNCTION.pow.definition = pow( base , expoente )

FUNCTION.min = min
FUNCTION.min.help = calcula o m\u00ednimo entre dois argumentos
FUNCTION.min.definition = min( num_txt , num_txt )

FUNCTION.max = max
FUNCTION.max.help = calcula o m\u00e1ximo entre dois argumentos
FUNCTION.max.definition = max( num_txt , num_txt )


FUNCTION.log = log
FUNCTION.log.help = Logaritmo de base 10
FUNCTION.log.definition = log( numero )


FUNCTION.ln = ln
FUNCTION.ln.help = Logaritmo natural ( base e )
FUNCTION.ln.definition = ln( numero )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.align = align
FUNCTION.align.help = calcula um texto o 1. argumento alinhada \u00e1 esquerda ou \u00e1 direita
FUNCTION.align.definition = align( simbolo , numero )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.elementsof = elementsOf
FUNCTION.elementsof.help = calcula numero de elementos de uma variavel\\n simples = 1 Array = numero de elementos
FUNCTION.elementsof.definition = elementsOf( variavel )

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

