/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.editor.left;

import core.data.exception.FlowchartException;
import flowchart.algorithm.Program;
import flowchart.algorithm.run.GraphExecutor;
import flowchart.shape.Fshape;
import i18n.EditorI18N;
import java.util.List;
import javax.swing.JOptionPane;
import ui.dialogs.FMessages;
import ui.editor.run.RunProgram;

/**
 *
 * @author zulu
 */
public class ConsoleRun extends javax.swing.JPanel {

    private Program myProgram;

    /**
     * Creates new form ConsolePanel
     */
    public ConsoleRun() {
        initComponents();
        console.setVerticalOrientation();
        I18N();
    }

    public final void I18N() {

        try {
            EditorI18N.loadResource(btConsoleRun, "CONSOLE.run",32);
            EditorI18N.loadResource(btConsoleDebug, "CONSOLE.debug",32);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Consola Erro na leitura da internacionalização");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnLeftPanelConsoleToolBar = new javax.swing.JPanel();
        btConsoleRun = new javax.swing.JButton();
        btConsoleDebug = new javax.swing.JButton();
        console = new ui.flowchart.console.Console();
        lblConsoleTab = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnLeftPanelConsoleToolBar.setLayout(new java.awt.GridLayout());

        btConsoleRun.setText("run");
        btConsoleRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsoleRunActionPerformed(evt);
            }
        });
        pnLeftPanelConsoleToolBar.add(btConsoleRun);

        btConsoleDebug.setText("debug");
        btConsoleDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsoleDebugActionPerformed(evt);
            }
        });
        pnLeftPanelConsoleToolBar.add(btConsoleDebug);

        add(pnLeftPanelConsoleToolBar, java.awt.BorderLayout.NORTH);
        add(console, java.awt.BorderLayout.CENTER);

        lblConsoleTab.setText("jLabel5");
        add(lblConsoleTab, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btConsoleRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsoleRunActionPerformed
        tryExecution();
    }//GEN-LAST:event_btConsoleRunActionPerformed

    private void btConsoleDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsoleDebugActionPerformed
        if (!compile()) {
            FMessages.dialog(FMessages.ERROR, EditorI18N.get("CONSOLE.compile.error"));
            return;
        }
        Program toRun = myProgram.getClone();
        new RunProgram(toRun);
    }//GEN-LAST:event_btConsoleDebugActionPerformed

    public void tryExecution() {
        if (!compile()) {
            FMessages.dialog(FMessages.ERROR, EditorI18N.get("CONSOLE.compile.error"));
        } else {
            execute();
        }
    }

    public boolean compile() {
        console.clear();
        List<Fshape> errors = myProgram.compile();
        if (errors.isEmpty()) {
            return true;
        } else {
            for (Fshape error : errors) {
                try {
                    error.parseShape(); // get the exception
                } catch (Exception e) {
                    console.write(e.getMessage());
                }
            }
        }
        return false;
    }

    public void execute() {
        try {
            GraphExecutor run = new GraphExecutor(myProgram, console);
            while (!run.isDone()) {
                run.executeFast();
            }
        } catch (FlowchartException ex) {
            FMessages.dialog(FMessages.ERROR, EditorI18N.get("CONSOLE.runtime.error") + "\n" + ex.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsoleDebug;
    private javax.swing.JButton btConsoleRun;
    private ui.flowchart.console.Console console;
    private javax.swing.JLabel lblConsoleTab;
    private javax.swing.JPanel pnLeftPanelConsoleToolBar;
    // End of variables declaration//GEN-END:variables

    /**
     * @param myFluxogram the myFluxogram to set
     */
    public void setMyFluxogram(Program myFluxogram) {
        this.myProgram = myFluxogram;
    }
}
